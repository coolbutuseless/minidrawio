% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DrawIOElement.R
\name{DrawIOElement}
\alias{DrawIOElement}
\alias{drawio_elem}
\title{DrawIO element builder}
\description{
DrawIO element builder

DrawIO element builder
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{.name}}{node name e.g. 'mxPoint', 'root'}

\item{\code{attribs}}{list of attributes for this node e.g. \code{width = 100}}

\item{\code{children}}{list of child nodes}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DrawIOElement$new()}}
\item \href{#method-update}{\code{DrawIOElement$update()}}
\item \href{#method-append}{\code{DrawIOElement$append()}}
\item \href{#method-add}{\code{DrawIOElement$add()}}
\item \href{#method-remove}{\code{DrawIOElement$remove()}}
\item \href{#method-as_character_inner}{\code{DrawIOElement$as_character_inner()}}
\item \href{#method-as_character}{\code{DrawIOElement$as_character()}}
\item \href{#method-print}{\code{DrawIOElement$print()}}
\item \href{#method-save}{\code{DrawIOElement$save()}}
\item \href{#method-copy}{\code{DrawIOElement$copy()}}
\item \href{#method-diagram}{\code{DrawIOElement$diagram()}}
\item \href{#method-mxGraphModel}{\code{DrawIOElement$mxGraphModel()}}
\item \href{#method-root}{\code{DrawIOElement$root()}}
\item \href{#method-mxCell}{\code{DrawIOElement$mxCell()}}
\item \href{#method-mxGeometry}{\code{DrawIOElement$mxGeometry()}}
\item \href{#method-UserObject}{\code{DrawIOElement$UserObject()}}
\item \href{#method-mxPoint}{\code{DrawIOElement$mxPoint()}}
\item \href{#method-rect}{\code{DrawIOElement$rect()}}
\item \href{#method-text}{\code{DrawIOElement$text()}}
\item \href{#method-line}{\code{DrawIOElement$line()}}
\item \href{#method-circle}{\code{DrawIOElement$circle()}}
\item \href{#method-polygon}{\code{DrawIOElement$polygon()}}
\item \href{#method-rand_id}{\code{DrawIOElement$rand_id()}}
\item \href{#method-clone}{\code{DrawIOElement$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a drawio element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$new(.name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.name}}{node name}

\item{\code{...}}{named elements are treated as attributes and the rest are
added as children for this node}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
Update the XML Element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$update(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{what to update in this element

\itemize{
\item{Named arguments are considered attributes and will overwrite
    existing attributes with the same name. Set to NULL to delete the attribute}
\item{Unnamed arguments are appended to the list of child nodes.  These
    should be text, other DrawIOElements or any ojbect that can be represented
    as a single text string using "as.character()"}
\item{to print just the attribute name, but without a value, set to NA}
}
Append a child node}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-append"></a>}}
\if{latex}{\out{\hypertarget{method-append}{}}}
\subsection{Method \code{append()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$append(..., position = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{child nodes}

\item{\code{position}}{default: NULL (append at end)
Create-and-add a child node to this element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$add(.name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.name}}{name of child node}

\item{\code{...}}{attributes of child node
Remove child objects at the given indicies}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$remove(indices)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indices}}{indices at which to remove children
Render this node at a particular depth}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_character_inner"></a>}}
\if{latex}{\out{\hypertarget{method-as_character_inner}{}}}
\subsection{Method \code{as_character_inner()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$as_character_inner(..., depth = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{extra arguments
Character representation}

\item{\code{depth}}{indentation}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_character"></a>}}
\if{latex}{\out{\hypertarget{method-as_character}{}}}
\subsection{Method \code{as_character()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$as_character(..., depth = 0, include_declaration = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{extra arguments passed to parent class}

\item{\code{depth}}{current rendering depth}

\item{\code{include_declaration}}{default: TRUE
Print the DrawIO string}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$print(include_declaration = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_declaration}}{default: TRUE}

\item{\code{...}}{extra arguments passed to parent class
Save DrawIO fragment. Usually not useful. Use \code{DrawIODocument$save()} instead}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save"></a>}}
\if{latex}{\out{\hypertarget{method-save}{}}}
\subsection{Method \code{save()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$save(filename, include_declaration = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{filename}

\item{\code{include_declaration}}{default: TRUE}

\item{\code{...}}{extra arguments passed to parent class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-copy"></a>}}
\if{latex}{\out{\hypertarget{method-copy}{}}}
\subsection{Method \code{copy()}}{
Deep copy of the R6 object
Core node: Add a diagram node to this element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$copy()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-diagram"></a>}}
\if{latex}{\out{\hypertarget{method-diagram}{}}}
\subsection{Method \code{diagram()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$diagram(id = NULL, name = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{default: NULL}

\item{\code{name}}{diagram name. default NULL}

\item{\code{...}}{further arguments passed on to '$add()'
Core node: Add an `mxGraphModel` node to this element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mxGraphModel"></a>}}
\if{latex}{\out{\hypertarget{method-mxGraphModel}{}}}
\subsection{Method \code{mxGraphModel()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$mxGraphModel(
  dx = 1212,
  dy = 906,
  grid = 1,
  gridSize = 10,
  guides = 1,
  tooltips = 1,
  connect = 1,
  arrows = 1,
  fold = 1,
  page = 1,
  pageScale = 1,
  pageWidth = 827,
  pageHeight = 1169,
  math = 0,
  shadow = 0,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dx, dy}}{size}

\item{\code{grid, gridSize, guides, tooltips, connect, arrows, fold, page, pageScale, pageWidth, pageHeight, math, shadow}}{refer to drawio
documentation for explanation}

\item{\code{...}}{further arguments passed on to '$add()'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-root"></a>}}
\if{latex}{\out{\hypertarget{method-root}{}}}
\subsection{Method \code{root()}}{
Core node: add a 'root' node to this element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$root(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{further arguments passed on to '$add()'
Core node: Add an 'mxCell' node to this element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mxCell"></a>}}
\if{latex}{\out{\hypertarget{method-mxCell}{}}}
\subsection{Method \code{mxCell()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$mxCell(
  id = NULL,
  parent = NULL,
  value = NULL,
  style = NULL,
  vertex = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{id for this node.}

\item{\code{parent}}{id of parent node}

\item{\code{value}}{text value}

\item{\code{style}}{style string}

\item{\code{vertex}}{0/1 to indicate if this is a vertex or not}

\item{\code{...}}{further arguments passed on to '$add()'
Core node: Add an 'mxGeometry' node to this element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mxGeometry"></a>}}
\if{latex}{\out{\hypertarget{method-mxGeometry}{}}}
\subsection{Method \code{mxGeometry()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$mxGeometry(
  x = NULL,
  y = NULL,
  width = NULL,
  height = NULL,
  as = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x, y, width, height}}{dimensions}

\item{\code{as}}{interpretation for this node. usually 'geometry'}

\item{\code{...}}{further arguments passed on to '$add()'
Core node: Add a 'UserObject' node to this element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserObject"></a>}}
\if{latex}{\out{\hypertarget{method-UserObject}{}}}
\subsection{Method \code{UserObject()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$UserObject(
  label = NULL,
  style = NULL,
  link = NULL,
  id = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{label, style, link, id}}{See drawio documentation for more info}

\item{\code{...}}{further arguments passed on to '$add()'
Core node: Add an 'mxPoint' node to this element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mxPoint"></a>}}
\if{latex}{\out{\hypertarget{method-mxPoint}{}}}
\subsection{Method \code{mxPoint()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$mxPoint(x = NULL, y = NULL, as = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x, y}}{coordinates of point}

\item{\code{as}}{interpretation for this node. usually 'geometry'}

\item{\code{...}}{further arguments passed on to '$add()'
Compound node: Add a cell + geometry representing a rectangle}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rect"></a>}}
\if{latex}{\out{\hypertarget{method-rect}{}}}
\subsection{Method \code{rect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$rect(
  x,
  y,
  width,
  height,
  colour = "black",
  fill = "white",
  size = 1,
  alpha = 1,
  id = NULL,
  parent = 1,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x, y, width, height}}{location and dimensions}

\item{\code{colour, fill, alpha}}{appearace}

\item{\code{size}}{stroke width}

\item{\code{id}}{default: NULL (auto-assigned)}

\item{\code{parent}}{id of parent}

\item{\code{...}}{further arguments for the element 'style'
Compound node: Create a cell + geometry containing text}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-text"></a>}}
\if{latex}{\out{\hypertarget{method-text}{}}}
\subsection{Method \code{text()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$text(
  text,
  x,
  y,
  width = fontsize,
  height = fontsize,
  colour = "none",
  fill = "none",
  fontsize = 12,
  alpha = 1,
  id = NULL,
  parent = 1,
  angle = 0,
  font = c("Helvetica", "Verdana", "Times New Roman", "Garamond", "Comic Sans MS",
    "Courier New", "Georgia", "Lucinda Console", "Tahoma"),
  align = "center",
  vertical_align = "middle",
  label_position = "center",
  vertical_label_position = "top",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{string}

\item{\code{x, y, width, height}}{location and dimensions}

\item{\code{colour, fill, alpha}}{appearace}

\item{\code{fontsize}}{default: 12}

\item{\code{id}}{default: NULL (auto-assigned)}

\item{\code{parent}}{id of parent.}

\item{\code{angle}}{degrees. defualt: 0}

\item{\code{font}}{font name default: Helvetica}

\item{\code{align, vertical_align, label_position, vertical_label_position}}{alignment of text}

\item{\code{...}}{further arguments for the element 'style'
Compound node: Create a cell + geometry containing a line}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-line"></a>}}
\if{latex}{\out{\hypertarget{method-line}{}}}
\subsection{Method \code{line()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$line(
  x1,
  y1,
  x2,
  y2,
  colour = "black",
  size = 1,
  alpha = 1,
  id = NULL,
  parent = 1,
  dashed = 0,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x1, y1, x2, y2}}{extents of}

\item{\code{colour, alpha}}{appearace}

\item{\code{size}}{stroke width}

\item{\code{id}}{default: NULL (auto-assigned)}

\item{\code{parent}}{id of parent}

\item{\code{dashed}}{dashed or not? default: 0 (not dashed)}

\item{\code{...}}{further arguments for the element 'style'
Compound node: Create a cell + geometry containing a circle}

\item{\code{angle}}{rotation angle}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-circle"></a>}}
\if{latex}{\out{\hypertarget{method-circle}{}}}
\subsection{Method \code{circle()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$circle(
  x,
  y,
  r,
  colour = "none",
  fill = "black",
  stroke_width = 0,
  alpha = 1,
  id = NULL,
  parent = 1,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x, y, r}}{location and radius}

\item{\code{colour, fill, alpha}}{appearace}

\item{\code{stroke_width}}{stroke width}

\item{\code{id}}{default: NULL (auto-assigned)}

\item{\code{parent}}{parent id}

\item{\code{...}}{further arguments for the element 'style'
Compound node: create a cell + geometry for a polygon or open/closed polyline

Complex shapes are added as stencils which are base64 encoded HTMLish tags}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-polygon"></a>}}
\if{latex}{\out{\hypertarget{method-polygon}{}}}
\subsection{Method \code{polygon()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$polygon(
  xs,
  ys,
  colour = "black",
  fill = "red",
  stroke_width = 1,
  alpha = 1,
  id = NULL,
  parent = 1,
  close = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{xs, ys}}{numeric vectors of coordinates}

\item{\code{colour, fill, alpha}}{appearance}

\item{\code{stroke_width}}{stroke width}

\item{\code{id}}{default: NULL (auto-assigned)}

\item{\code{parent}}{parent id}

\item{\code{close}}{if the polyline open or closed? default closed}

\item{\code{...}}{further arguments for the element 'style'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rand_id"></a>}}
\if{latex}{\out{\hypertarget{method-rand_id}{}}}
\subsection{Method \code{rand_id()}}{
Generate a random ID for an element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$rand_id()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DrawIOElement$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
